{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aames\\\\Square-Push\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport Model from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js';\nimport ninjase from './ninja-se.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0)); // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0); // change values to force redraw\n\n  const appRef = React.useRef(null); // later need to be able to refer to App \n  const canvasRef = React.useRef(null); // later need to be able to refer to Canvas\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw]); // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  /* controller to handle moving of ninja-se */\n  const moveNinjaSe = (verticalChange, horizontalChange) => {\n    if (model.won == false) {\n      // prevents ninja-se from moving if board is de-activated (game is won)\n      if (model.board.isValidMove(verticalChange, horizontalChange) == true) {\n        model.board.ninjaSeRow += verticalChange;\n        model.board.ninjaSeColumn += horizontalChange;\n        model.count++;\n      }\n\n      // for each of the 4 squares ninja-se occupies checks if squares must be shifted due to the movement of the character, and if so shifts them\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow, model.board.ninjaSeColumn);\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow, model.board.ninjaSeColumn + 1);\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow + 1, model.board.ninjaSeColumn);\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow + 1, model.board.ninjaSeColumn + 1);\n    }\n    forceRedraw(redraw + 1); // react to changes, if model has changed.\n  };\n\n  /* controller for removing 2x2 squares */\n  const removeBlocks = () => {\n    if (model.won == false) {\n      // prevents blocks from being removed if board is de-activated (game is won)\n      model.removeBlocks();\n    }\n    forceRedraw(redraw + 1); // react to changes, if model has changed.\n  };\n\n  /* controller for choosing new configuration */\n  const chooseConfiguration = config => {\n    model.changeConfiguration(config);\n    forceRedraw(redraw + 1); // react to changes, if model has changed.\n  };\n\n  /* controller for reseting configuration */\n  const resetConfiguration = () => {\n    model.resetConfiguration();\n    forceRedraw(redraw + 1); // react to changes, if model has changed.\n  };\n\n  // HTML Code for GUI elements\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appRef,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      tabIndex: \"1\",\n      \"data-testid\": \"canvas\",\n      className: \"App-canvas\",\n      ref: canvasRef,\n      width: 700,\n      height: 600\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"upbutton\",\n      \"data-testid\": \"upbutton\",\n      onClick: e => moveNinjaSe(-1, 0),\n      children: \"^\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"downbutton\",\n      \"data-testid\": \"downbutton\",\n      onClick: e => moveNinjaSe(1, 0),\n      children: \"v\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"rightbutton\",\n      \"data-testid\": \"rightbutton\",\n      onClick: e => moveNinjaSe(0, 1),\n      children: \">\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"leftbutton\",\n      \"data-testid\": \"leftbutton\",\n      onClick: e => moveNinjaSe(0, -1),\n      children: \"<\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"removebutton\",\n      \"data-testid\": \"removebutton\",\n      onClick: e => removeBlocks(),\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"config1button\",\n      \"data-testid\": \"config1button\",\n      onClick: e => chooseConfiguration(0),\n      children: \"config 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"config2button\",\n      \"data-testid\": \"config2button\",\n      onClick: e => chooseConfiguration(1),\n      children: \"config 2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"config3button\",\n      \"data-testid\": \"config3button\",\n      onClick: e => chooseConfiguration(2),\n      children: \"config 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"resetbutton\",\n      \"data-testid\": \"resetbutton\",\n      onClick: e => resetConfiguration(),\n      children: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"ninjase\",\n      src: ninjase,\n      alt: \"hidden\",\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hjqSLNayM3DeZaL/BO+A2eMkUtY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Model","redrawCanvas","ninjase","jsxDEV","_jsxDEV","App","_s","model","setModel","useState","redraw","forceRedraw","appRef","useRef","canvasRef","useEffect","current","moveNinjaSe","verticalChange","horizontalChange","won","board","isValidMove","ninjaSeRow","ninjaSeColumn","count","moveSquares","removeBlocks","chooseConfiguration","config","changeConfiguration","resetConfiguration","className","ref","children","tabIndex","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","e","id","src","alt","hidden","_c","$RefreshReg$"],"sources":["C:/Users/aames/Square-Push/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nimport Model from './model/Model.js';\r\nimport { redrawCanvas } from './boundary/Boundary.js'\r\nimport ninjase from './ninja-se.svg'\r\n\r\nfunction App() {\r\n  // initial instantiation of the Model\r\n  const [model, setModel] = React.useState(new Model(0));  // only place where Model object is instantiated.\r\n  const [redraw, forceRedraw] = React.useState(0);    // change values to force redraw\r\n\r\n  const appRef = React.useRef(null);      // later need to be able to refer to App \r\n  const canvasRef = React.useRef(null);   // later need to be able to refer to Canvas\r\n\r\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\r\n  React.useEffect(() => {\r\n\r\n    /** Happens once. */\r\n    redrawCanvas(model, canvasRef.current, appRef.current);\r\n  }, [model, redraw])   // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\r\n\r\n  /* controller to handle moving of ninja-se */\r\n  const moveNinjaSe = (verticalChange, horizontalChange) => {\r\n    if (model.won == false) { // prevents ninja-se from moving if board is de-activated (game is won)\r\n      if (model.board.isValidMove(verticalChange, horizontalChange) == true) { \r\n        model.board.ninjaSeRow += verticalChange\r\n        model.board.ninjaSeColumn += horizontalChange\r\n        model.count++;\r\n      }\r\n\r\n      // for each of the 4 squares ninja-se occupies checks if squares must be shifted due to the movement of the character, and if so shifts them\r\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow, model.board.ninjaSeColumn)\r\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow, model.board.ninjaSeColumn + 1)\r\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow + 1, model.board.ninjaSeColumn)\r\n      model.moveSquares(verticalChange, horizontalChange, model.board.ninjaSeRow + 1, model.board.ninjaSeColumn + 1)\r\n    }\r\n    forceRedraw(redraw + 1)   // react to changes, if model has changed.\r\n  }\r\n\r\n  /* controller for removing 2x2 squares */\r\n  const removeBlocks = () => {\r\n    if (model.won == false) { // prevents blocks from being removed if board is de-activated (game is won)\r\n      model.removeBlocks()\r\n    }\r\n    forceRedraw(redraw + 1)   // react to changes, if model has changed.\r\n  }\r\n\r\n  /* controller for choosing new configuration */\r\n  const chooseConfiguration = (config) => {\r\n    model.changeConfiguration(config)\r\n    forceRedraw(redraw + 1)   // react to changes, if model has changed.\r\n  }\r\n\r\n  /* controller for reseting configuration */\r\n  const resetConfiguration = () => {\r\n    model.resetConfiguration()\r\n    forceRedraw(redraw + 1)   // react to changes, if model has changed.\r\n  }\r\n\r\n  // HTML Code for GUI elements\r\n  return (\r\n    <div className=\"App\" ref={appRef}>\r\n      <canvas tabIndex=\"1\"\r\n        data-testid=\"canvas\"\r\n        className=\"App-canvas\"\r\n        ref={canvasRef}\r\n        width={700}\r\n        height={600}\r\n      />\r\n\r\n      <button className=\"upbutton\" data-testid=\"upbutton\" onClick={(e) => moveNinjaSe(-1, 0)}   >^</button>\r\n      <button className=\"downbutton\" data-testid=\"downbutton\" onClick={(e) => moveNinjaSe(1, 0)}   >v</button>\r\n      <button className='rightbutton' data-testid=\"rightbutton\" onClick={(e) => moveNinjaSe(0, 1)} >&gt;</button>\r\n      <button className='leftbutton' data-testid=\"leftbutton\" onClick={(e) => moveNinjaSe(0, -1)} >&lt;</button>\r\n      <button className='removebutton' data-testid=\"removebutton\" onClick={(e) => removeBlocks()} >x</button>\r\n      <button className='config1button' data-testid=\"config1button\" onClick={(e) => chooseConfiguration(0)} >config 1</button>\r\n      <button className='config2button' data-testid=\"config2button\" onClick={(e) => chooseConfiguration(1)} >config 2</button>\r\n      <button className='config3button' data-testid=\"config3button\" onClick={(e) => chooseConfiguration(2)} >config 3</button>\r\n      <button className='resetbutton' data-testid=\"resetbutton\" onClick={(e) => resetConfiguration()} >reset</button>\r\n      <img id=\"ninjase\"  src={ninjase} alt=\"hidden\" hidden></img>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}