{"ast":null,"code":"/* Redraw entire canvas from model */\nexport function redrawCanvas(model, canvasObj, appObj) {\n  const ctx = canvasObj.getContext('2d');\n  if (ctx === null) {\n    return;\n  } // here for testing purposes...\n\n  // clear the canvas area before rendering the coordinates held in state\n  ctx.clearRect(0, 0, canvasObj.width, canvasObj.height);\n\n  // place black background for board\n  ctx.fillStyle = 'black';\n  ctx.fillRect(50, 50, model.board.size * 50 + model.board.size * 5 + 5, model.board.size * 50 + model.board.size * 5 + 5);\n\n  // draw white squares on the board\n  let size = model.board.size;\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      let square = model.board.grid[r][c];\n      let x = (c + 1) * 50 + (c + 1) * 5;\n      let y = (r + 1) * 50 + (r + 1) * 5;\n      let w = 50;\n      let h = 50;\n      ctx.fillStyle = square.color;\n      ctx.fillRect(x, y, w, h);\n    }\n  }\n\n  // run if the game has not been won yet\n  if (model.won == false) {\n    // draw score on board: represents the amount of blocks moved & removed so far\n    ctx.font = \"50px sans-serif\";\n    ctx.textAlign = \"left\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(\"Score: \" + model.score, 425, (model.size + 1) * 50 + model.board.size * 5 + 5);\n\n    // draw count on board: represents the amount of moves taken so far\n    ctx.textAlign = \"left\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(\"Count: \" + model.count, 425, (model.size + 1) * 50 + model.board.size * 5 + 5 - 48);\n  }\n\n  // draws ninjase if page is refreshed\n  document.getElementById('ninjase').onload = () => drawNinjaSe(model);\n\n  // draw ninjase\n  drawNinjaSe(model);\n\n  // run if game has been won\n  if (model.won == true) {\n    // draw black background\n    ctx.fillStyle = 'rgba(0, 0, 0, .9)';\n    ctx.fillRect(50, 50, 335, 335);\n\n    // draw the win congrats message on the board\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"white\";\n    ctx.fillText(\"Congrats\", 220, 190);\n    ctx.fillText(\"You Won!\", 220, 250);\n\n    // draw score on board: represents the amount of blocks moved & removed so far\n    ctx.font = \"50px sans-serif\";\n    ctx.textAlign = \"left\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(\"Score: \" + model.score, 425, 7 * 50 + 7 * 5);\n\n    // draw count on board:represents the amount of moves taken so far\n    ctx.textAlign = \"left\";\n    ctx.fillStyle = \"black\";\n    ctx.fillText(\"Count: \" + model.count, 425, 7 * 50 + 7 * 5 - 60);\n  }\n\n  /* draws ninja-se on the board */\n  function drawNinjaSe(model) {\n    let image = document.getElementById('ninjase');\n    let x = (model.board.ninjaSeColumn + 1) * 50 + (model.board.ninjaSeColumn + 1) * 5; //get numerical column location of ninjase \n    let y = (model.board.ninjaSeRow + 1) * 50 + (model.board.ninjaSeRow + 1) * 5; //get numerical row location of ninjase \n    let w = 105;\n    let h = 105;\n    ctx.drawImage(image, x, y, w, h);\n  }\n}","map":{"version":3,"names":["redrawCanvas","model","canvasObj","appObj","ctx","getContext","clearRect","width","height","fillStyle","fillRect","board","size","r","c","square","grid","x","y","w","h","color","won","font","textAlign","fillText","score","count","document","getElementById","onload","drawNinjaSe","image","ninjaSeColumn","ninjaSeRow","drawImage"],"sources":["C:/Users/aames/Square-Push/src/boundary/Boundary.js"],"sourcesContent":["\r\n\r\n/* Redraw entire canvas from model */\r\nexport function redrawCanvas(model, canvasObj, appObj) {\r\n  const ctx = canvasObj.getContext('2d');\r\n  if (ctx === null) { return; }    // here for testing purposes...\r\n\r\n  // clear the canvas area before rendering the coordinates held in state\r\n  ctx.clearRect(0, 0, canvasObj.width, canvasObj.height);\r\n\r\n  // place black background for board\r\n  ctx.fillStyle = 'black'\r\n  ctx.fillRect(50, 50, (model.board.size) * 50 + (model.board.size * 5) + 5, (model.board.size) * 50 + (model.board.size * 5) + 5)\r\n\r\n  // draw white squares on the board\r\n  let size = model.board.size\r\n  for (let r = 0; r < size; r++) {\r\n    for (let c = 0; c < size; c++) {\r\n      let square = model.board.grid[r][c]\r\n      let x = ((c + 1) * 50) + ((c + 1) * 5)\r\n      let y = ((r + 1) * 50) + ((r + 1) * 5)\r\n      let w = 50\r\n      let h = 50\r\n      ctx.fillStyle = square.color\r\n      ctx.fillRect(x, y, w, h)\r\n    }\r\n  }\r\n\r\n  // run if the game has not been won yet\r\n  if (model.won == false) {\r\n    // draw score on board: represents the amount of blocks moved & removed so far\r\n    ctx.font = \"50px sans-serif\"\r\n    ctx.textAlign = \"left\"\r\n    ctx.fillStyle = \"black\"\r\n    ctx.fillText(\"Score: \" + model.score, 425, (model.size + 1) * 50 + (model.board.size * 5) + 5)\r\n\r\n    // draw count on board: represents the amount of moves taken so far\r\n    ctx.textAlign = \"left\"\r\n    ctx.fillStyle = \"black\"\r\n    ctx.fillText(\"Count: \" + model.count, 425, (model.size + 1) * 50 + (model.board.size * 5) + 5 - 48)\r\n  }\r\n\r\n  // draws ninjase if page is refreshed\r\n  document.getElementById('ninjase').onload = () => drawNinjaSe(model)\r\n\r\n  // draw ninjase\r\n  drawNinjaSe(model)\r\n\r\n  // run if game has been won\r\n  if (model.won == true) {\r\n    // draw black background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, .9)'\r\n    ctx.fillRect(50, 50, 335, 335)\r\n\r\n    // draw the win congrats message on the board\r\n    ctx.textAlign = \"center\"\r\n    ctx.fillStyle = \"white\"\r\n    ctx.fillText(\"Congrats\", 220, 190)\r\n    ctx.fillText(\"You Won!\", 220, 250)\r\n\r\n    // draw score on board: represents the amount of blocks moved & removed so far\r\n    ctx.font = \"50px sans-serif\"\r\n    ctx.textAlign = \"left\"\r\n    ctx.fillStyle = \"black\"\r\n    ctx.fillText(\"Score: \" + model.score, 425, (7) * 50 + (7 * 5))\r\n\r\n    // draw count on board:represents the amount of moves taken so far\r\n    ctx.textAlign = \"left\"\r\n    ctx.fillStyle = \"black\"\r\n    ctx.fillText(\"Count: \" + model.count, 425, (7) * 50 + (7 * 5) - 60)\r\n  }\r\n\r\n  /* draws ninja-se on the board */\r\n  function drawNinjaSe(model) {\r\n    let image = document.getElementById('ninjase')\r\n    let x = ((model.board.ninjaSeColumn + 1) * 50) + ((model.board.ninjaSeColumn + 1) * 5) //get numerical column location of ninjase \r\n    let y = ((model.board.ninjaSeRow + 1) * 50) + ((model.board.ninjaSeRow + 1) * 5) //get numerical row location of ninjase \r\n    let w = 105\r\n    let h = 105\r\n    ctx.drawImage(image, x, y, w, h)\r\n  }\r\n\r\n}"],"mappings":"AAEA;AACA,OAAO,SAASA,YAAYA,CAACC,KAAK,EAAEC,SAAS,EAAEC,MAAM,EAAE;EACrD,MAAMC,GAAG,GAAGF,SAAS,CAACG,UAAU,CAAC,IAAI,CAAC;EACtC,IAAID,GAAG,KAAK,IAAI,EAAE;IAAE;EAAQ,CAAC,CAAI;;EAEjC;EACAA,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEJ,SAAS,CAACK,KAAK,EAAEL,SAAS,CAACM,MAAM,CAAC;;EAEtD;EACAJ,GAAG,CAACK,SAAS,GAAG,OAAO;EACvBL,GAAG,CAACM,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAGT,KAAK,CAACU,KAAK,CAACC,IAAI,GAAI,EAAE,GAAIX,KAAK,CAACU,KAAK,CAACC,IAAI,GAAG,CAAE,GAAG,CAAC,EAAGX,KAAK,CAACU,KAAK,CAACC,IAAI,GAAI,EAAE,GAAIX,KAAK,CAACU,KAAK,CAACC,IAAI,GAAG,CAAE,GAAG,CAAC,CAAC;;EAEhI;EACA,IAAIA,IAAI,GAAGX,KAAK,CAACU,KAAK,CAACC,IAAI;EAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,EAAEC,CAAC,EAAE,EAAE;IAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;MAC7B,IAAIC,MAAM,GAAGd,KAAK,CAACU,KAAK,CAACK,IAAI,CAACH,CAAC,CAAC,CAACC,CAAC,CAAC;MACnC,IAAIG,CAAC,GAAI,CAACH,CAAC,GAAG,CAAC,IAAI,EAAE,GAAK,CAACA,CAAC,GAAG,CAAC,IAAI,CAAE;MACtC,IAAII,CAAC,GAAI,CAACL,CAAC,GAAG,CAAC,IAAI,EAAE,GAAK,CAACA,CAAC,GAAG,CAAC,IAAI,CAAE;MACtC,IAAIM,CAAC,GAAG,EAAE;MACV,IAAIC,CAAC,GAAG,EAAE;MACVhB,GAAG,CAACK,SAAS,GAAGM,MAAM,CAACM,KAAK;MAC5BjB,GAAG,CAACM,QAAQ,CAACO,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAC1B;EACF;;EAEA;EACA,IAAInB,KAAK,CAACqB,GAAG,IAAI,KAAK,EAAE;IACtB;IACAlB,GAAG,CAACmB,IAAI,GAAG,iBAAiB;IAC5BnB,GAAG,CAACoB,SAAS,GAAG,MAAM;IACtBpB,GAAG,CAACK,SAAS,GAAG,OAAO;IACvBL,GAAG,CAACqB,QAAQ,CAAC,SAAS,GAAGxB,KAAK,CAACyB,KAAK,EAAE,GAAG,EAAE,CAACzB,KAAK,CAACW,IAAI,GAAG,CAAC,IAAI,EAAE,GAAIX,KAAK,CAACU,KAAK,CAACC,IAAI,GAAG,CAAE,GAAG,CAAC,CAAC;;IAE9F;IACAR,GAAG,CAACoB,SAAS,GAAG,MAAM;IACtBpB,GAAG,CAACK,SAAS,GAAG,OAAO;IACvBL,GAAG,CAACqB,QAAQ,CAAC,SAAS,GAAGxB,KAAK,CAAC0B,KAAK,EAAE,GAAG,EAAE,CAAC1B,KAAK,CAACW,IAAI,GAAG,CAAC,IAAI,EAAE,GAAIX,KAAK,CAACU,KAAK,CAACC,IAAI,GAAG,CAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACrG;;EAEA;EACAgB,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,MAAM,GAAG,MAAMC,WAAW,CAAC9B,KAAK,CAAC;;EAEpE;EACA8B,WAAW,CAAC9B,KAAK,CAAC;;EAElB;EACA,IAAIA,KAAK,CAACqB,GAAG,IAAI,IAAI,EAAE;IACrB;IACAlB,GAAG,CAACK,SAAS,GAAG,mBAAmB;IACnCL,GAAG,CAACM,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;;IAE9B;IACAN,GAAG,CAACoB,SAAS,GAAG,QAAQ;IACxBpB,GAAG,CAACK,SAAS,GAAG,OAAO;IACvBL,GAAG,CAACqB,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC;IAClCrB,GAAG,CAACqB,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC;;IAElC;IACArB,GAAG,CAACmB,IAAI,GAAG,iBAAiB;IAC5BnB,GAAG,CAACoB,SAAS,GAAG,MAAM;IACtBpB,GAAG,CAACK,SAAS,GAAG,OAAO;IACvBL,GAAG,CAACqB,QAAQ,CAAC,SAAS,GAAGxB,KAAK,CAACyB,KAAK,EAAE,GAAG,EAAG,CAAC,GAAI,EAAE,GAAI,CAAC,GAAG,CAAE,CAAC;;IAE9D;IACAtB,GAAG,CAACoB,SAAS,GAAG,MAAM;IACtBpB,GAAG,CAACK,SAAS,GAAG,OAAO;IACvBL,GAAG,CAACqB,QAAQ,CAAC,SAAS,GAAGxB,KAAK,CAAC0B,KAAK,EAAE,GAAG,EAAG,CAAC,GAAI,EAAE,GAAI,CAAC,GAAG,CAAE,GAAG,EAAE,CAAC;EACrE;;EAEA;EACA,SAASI,WAAWA,CAAC9B,KAAK,EAAE;IAC1B,IAAI+B,KAAK,GAAGJ,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;IAC9C,IAAIZ,CAAC,GAAI,CAAChB,KAAK,CAACU,KAAK,CAACsB,aAAa,GAAG,CAAC,IAAI,EAAE,GAAK,CAAChC,KAAK,CAACU,KAAK,CAACsB,aAAa,GAAG,CAAC,IAAI,CAAE,EAAC;IACvF,IAAIf,CAAC,GAAI,CAACjB,KAAK,CAACU,KAAK,CAACuB,UAAU,GAAG,CAAC,IAAI,EAAE,GAAK,CAACjC,KAAK,CAACU,KAAK,CAACuB,UAAU,GAAG,CAAC,IAAI,CAAE,EAAC;IACjF,IAAIf,CAAC,GAAG,GAAG;IACX,IAAIC,CAAC,GAAG,GAAG;IACXhB,GAAG,CAAC+B,SAAS,CAACH,KAAK,EAAEf,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAClC;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}